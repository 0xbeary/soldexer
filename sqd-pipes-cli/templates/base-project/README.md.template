# {{projectName}} - ClickHouse Schema Management

Base project template for managing ClickHouse schemas and materialized views.

## Quick Start

```bash
# Install dependencies
pnpm install

# Set environment variables
export CLICKHOUSE_URL=http://localhost:8123
export CLICKHOUSE_DB=default

# Sync schema to database
pnpm run migrate
```

## Database Migrations

```bash
# Apply pending migrations
pnpm run migrate

# Rollback last migration
pnpm run migrate:rollback
```

This applies database migrations from the `sql/migrations/` directory. Each migration has UP and DOWN sections for applying and rolling back changes.

## Architecture

```
Independent Pipes ──────────────────────► Base Tables
(pumpfun-tokens, hono-api, etc)           (Raw Data)
                                           │
                   Database Migrations ──────► Materialized Views
                   (sql/migrations/)       (Fast Aggregations)
```

## Configuration
```

## ⚙️ Configuration

Environment variables:

- `CLICKHOUSE_URL` - ClickHouse URL (default: http://localhost:8123)
- `CLICKHOUSE_DB` - Database name (default: default)
- `CLICKHOUSE_USER` - Username (default: default)
- `CLICKHOUSE_PASSWORD` - Password (default: empty)

## Project Structure

- `sql/migrations/` - Database migration files with UP/DOWN sections
- `sql/scripts/migrate.ts` - Migration runner script
- `src/utils/` - Database utilities and logger

## Creating Migrations

Create a new migration file in `sql/migrations/` with this format:

```sql
-- UP
CREATE MATERIALIZED VIEW my_new_view
ENGINE = SummingMergeTree()
ORDER BY date
AS SELECT ...;

-- DOWN
DROP VIEW IF EXISTS my_new_view;
```

Migration files should be named with a sequential number: `001_initial.sql`, `002_add_views.sql`, etc.

## Perfect For

- Cross-pipe materialized views
- Schema management
- Data aggregations
- Analytics queries

Keep this project focused on schema management - use separate pipe modules for data ingestion and APIs!
